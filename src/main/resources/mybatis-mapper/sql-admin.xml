<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.anesi.mapper.AdminMapper">
	<!-- 상품 리스트 조회 -->
	<select id="adminProductList" parameterType="hashmap" resultType="com.example.anesi.model.Product">
		SELECT p.*, o.STOCK, CATEGORY_NAME
		FROM t3_tbl_product p
		LEFT JOIN (
			SELECT PRODUCT_NO, SUM(PRODUCT_STOCK) STOCK
			FROM t3_tbl_product_option
			GROUP BY PRODUCT_NO
		) o ON p.PRODUCT_NO = o.PRODUCT_NO
		INNER JOIN t3_tbl_product_category c
			ON p.CATEGORY_NO = c.CATEGORY_NO
	</select>
	
	<select id="adminProductInfo" parameterType="hashmap" resultType="com.example.anesi.model.Product">
		SELECT *
		FROM t3_tbl_product p
		LEFT JOIN t3_tbl_product_option o
			ON p.PRODUCT_NO = o.PRODUCT_NO
		WHERE p.PRODUCT_NO = #{productNo}
	</select>
	
	<update id="adminUpdateProduct" parameterType="hashmap">
		UPDATE t3_tbl_product
			SET
			PRODUCT_NAME = #{productName},
			PRODUCT_PRICE = #{productPrice},
			DISCOUNT = #{discount},
			DISCOUNT_YN = #{discountYn},
			UDATETIME = now()			
		WHERE PRODUCT_NO = #{productNo}
	</update>
	
	<update id="adminOptionUpdate" parameterType="hashmap">
		UPDATE t3_tbl_product_option
			SET
			OPTION_NAME = #{optionName},
			OPTION_PRICE = #{optionPrice},
			PRODUCT_STOCK = #{productStock}
		WHERE OPTION_NO = #{optionNo}
	</update>
	
	<insert id="adminInsertOption" parameterType="hashmap">
		INSERT INTO t3_tbl_product_option(PRODUCT_NO, OPTION_NAME, OPTION_PRICE, PRODUCT_STOCK)
    	VALUES(#{productNo}, #{optionName}, #{optionPrice}, #{productStock})
	</insert>
	
	<update id="adminProductSituation" parameterType="hashmap">
		UPDATE t3_tbl_product
			SET
			DELETE_YN = #{situation}
		WHERE PRODUCT_NO IN
		<foreach collection="list" close=")" open="(" item="item" separator=",">
			#{item}
		</foreach>
	</update>
	
	<delete id="adminDeleteOption" parameterType="hashmap">
		DELETE 
		FROM t3_tbl_product_option
		WHERE OPTION_NO IN
		<foreach collection="list" close=")" open="(" item="item" separator=",">
			#{item}
		</foreach>
	</delete>
	
	<select id="selectDeliveryList" resultType="com.example.anesi.model.UserOrder">
		SELECT o.*, p.PRODUCT_NAME, ot.OPTION_NAME, a.ZIPCODE, a.ADDR, a.ADDR2
		FROM t3_tbl_user_order o
		INNER JOIN t3_tbl_product p ON o.PRODUCT_NO = p.PRODUCT_NO
		INNER JOIN t3_tbl_product_option ot ON o.OPTION_NO = ot.OPTION_NO
		INNER JOIN t3_tbl_user_address a ON o.ADDR_NO = a.ADDR_NO
		
		UNION
		
		SELECT o.*, p.PRODUCT_NAME, ot.OPTION_NAME, a.ZIPCODE, a.ADDR, a.ADDR2
		FROM t3_tbl_nonuser_order o
		INNER JOIN t3_tbl_product p ON o.PRODUCT_NO = p.PRODUCT_NO
		INNER JOIN t3_tbl_product_option ot ON o.OPTION_NO = ot.OPTION_NO
		INNER JOIN t3_tbl_nonuser_address a ON o.ADDR_NO = a.ADDR_NO
	</select>
	
	<update id="updateDelivery" parameterType="hashmap">
		UPDATE t3_tbl_user_order
			SET
			DELIVERY_SIT = #{sit}
		WHERE PAYMENT_NO IN 
		<foreach collection="list" close=")" open="(" item="item" separator=",">
			#{item}
		</foreach>
	</update>
	
	<update id="updateNonDelivery" parameterType="hashmap">
		UPDATE t3_tbl_nonuser_order
			SET
			DELIVERY_SIT = #{sit}
		WHERE PAYMENT_NO IN 
		<foreach collection="list" close=")" open="(" item="item" separator=",">
			#{item}
		</foreach>
	</update>
	
	<select id="selectSearchList" parameterType="hashmap" resultType="com.example.anesi.model.UserOrder">
	    SELECT o.*, p.PRODUCT_NAME, ot.OPTION_NAME, a.ZIPCODE, a.ADDR, a.ADDR2
	    FROM t3_tbl_user_order o
	    INNER JOIN t3_tbl_product p ON o.PRODUCT_NO = p.PRODUCT_NO
	    INNER JOIN t3_tbl_product_option ot ON o.OPTION_NO = ot.OPTION_NO
	    INNER JOIN t3_tbl_user_address a ON o.ADDR_NO = a.ADDR_NO
	    
	    WHERE
	        <choose>
	            <when test="searchOption == 'PAYMENT_NO'">
	                o.PAYMENT_NO LIKE CONCAT('%',#{searchText},'%')
	            </when>
	            <when test="searchOption == 'PRODUCT_NAME'">
	                p.PRODUCT_NAME LIKE CONCAT('%',#{searchText},'%')
	            </when>
	            <when test="searchOption == 'RECEIPT_NAME'">
	                o.RECEIPT_NAME LIKE CONCAT('%',#{searchText},'%')
	            </when>
	        </choose>
	    
	    UNION
	    
	    SELECT o.*, p.PRODUCT_NAME, ot.OPTION_NAME, a.ZIPCODE, a.ADDR, a.ADDR2
	    FROM t3_tbl_nonuser_order o
	    INNER JOIN t3_tbl_product p ON o.PRODUCT_NO = p.PRODUCT_NO
	    INNER JOIN t3_tbl_product_option ot ON o.OPTION_NO = ot.OPTION_NO
	    INNER JOIN t3_tbl_nonuser_address a ON o.ADDR_NO = a.ADDR_NO
	    
	    WHERE
	        <choose>
	            <when test="searchOption == 'PAYMENT_NO'">
	                o.PAYMENT_NO LIKE CONCAT('%',#{searchText},'%')
	            </when>
	            <when test="searchOption == 'PRODUCT_NAME'">
	                p.PRODUCT_NAME LIKE CONCAT('%',#{searchText},'%')
	            </when>
	            <when test="searchOption == 'RECEIPT_NAME'">
	                o.RECEIPT_NAME LIKE CONCAT('%',#{searchText},'%')
	            </when>
	        </choose>
	</select>
	
	<select id="selectAdminInquiryList" parameterType="hashmap" resultType="com.example.anesi.model.Inquiry">
		SELECT i.*, u.USER_EMAIL, p.PRODUCT_NAME, COALESCE(o.OPTION_NAME, '-') AS OPTION_NAME
		FROM t3_tbl_user_inquiry i
		INNER JOIN t3_tbl_user u
			ON i.USER_NO = u.USER_NO
		INNER JOIN t3_tbl_product p
			ON i.PRODUCT_NO = p.PRODUCT_NO
		LEFT JOIN t3_tbl_product_option o
			ON i.OPTION_NO = o.OPTION_NO
	</select>
	
	<update id="updateAdminInquiry" parameterType="hashmap">
		UPDATE t3_tbl_user_inquiry
			SET
			REPLY = #{reply},
			UDATETIME = now()
		WHERE ENQUIRY_NO = #{enquiryNo}			
	</update>
	

	<select id="selectAdminReviewList" parameterType="hashmap" resultType="com.example.anesi.model.Review">
		SELECT r.*, i.R_IMG_NAME, i.R_IMG_PATH, p.PRODUCT_NAME, p.PRODUCT_NO, u.NICK
		FROM t3_tbl_user_review r
		LEFT JOIN t3_tbl_review_image i
			ON r.R_NO = i.R_NO
		INNER JOIN t3_tbl_product p
			ON p.PRODUCT_NO = r.PRODUCT_NO
		INNER JOIN t3_tbl_user u
			ON u.USER_NO = r.USER_NO		
	</select>
	
	<delete id="deleteAdminReview" parameterType="hashmap">
		DELETE
		FROM t3_tbl_user_review
		WHERE R_NO IN
		<foreach collection="list" close=")" open="(" item="item" separator=",">
			#{item}
		</foreach>
	</delete>
	
	<!--고객관리-->
	<select id="selectUserList" parameterType="hashmap" resultType="com.example.anesi.model.User">
		SELECT *
		FROM t3_tbl_user
		WHERE STATUS = 'U'
		<choose>
				<when test="searchOption == 'USER_NO'">
					  AND USER_NO LIKE CONCAT('%',#{searchText},'%')
				</when>
				<when test="searchOption == 'USER_EMAIL'">
					  AND USER_EMAIL LIKE CONCAT('%',#{searchText},'%')
				</when>
				<when test="searchOption == 'USER_NAME'">
					  AND USER_NAME LIKE CONCAT('%',#{searchText},'%')
				</when>
			</choose>
	</select>
	
	<select id="selectUserInfo" parameterType="hashmap" resultType="com.example.anesi.model.User">
		SELECT *
		FROM t3_tbl_user 
		WHERE USER_NO = #{userNo} 
	</select>
	
	<update id="updateUser" parameterType="hashmap">
		UPDATE t3_tbl_user
			SET
			USER_NAME = #{userName},
			NICK = #{nick},
			PHONE = #{phone},
			BIRTHDAY = #{birthday},
			GENDER = #{gender},
			SMSYN = #{smsYn},
			UDATETIME = now()			
		WHERE USER_NO = #{userNo}
	</update>
	
	<update id="deleteUser" parameterType="hashmap">
		UPDATE t3_tbl_user
			SET
			DELETE_YN = #{deleteYn}
		WHERE USER_NO = #{userNo}
	</update>
	
	<update id="resetUser" parameterType="hashmap">
		UPDATE t3_tbl_user
			SET
			CNT = 0
		WHERE USER_NO = #{userNo}
	</update>
	
	<update id="adminResetUserCnt" parameterType="hashmap">
		UPDATE t3_tbl_user
			SET
			CNT = 0
		WHERE USER_NO IN 
		<foreach collection="list" close=")" open="(" item="item" separator=",">
			#{item}
		</foreach>
	</update>
	
	
		
	<!-- 알림-->
	<!--전체 알림 리스트 불러오기-->
	<select id="selectAlarmAll" parameterType="hashmap" resultType="com.example.anesi.model.User">
		SELECT A.*, T.ALARM_CONTENT,T.ICON, U.NICK
		FROM t3_tbl_alarm A
		JOIN t3_tbl_alarm_text T ON A.ALARM_TYPE=T.ALARM_TYPE 
		JOIN t3_tbl_user U ON A.USER_NO=U.USER_NO
		WHERE U.USER_NO = #{userNo}
	</select>
	
	
	<!--알림인서트-->
	<insert id="insertAlarm" parameterType="hashmap" >
		INSERT INTO t3_tbl_alarm
		(USER_NO, ALARM_TYPE)
    	VALUES
    	(#{userNo}, #{alarmType})
	</insert>
	
	<!-- 알람삭제-->
	<delete id="deleteAlarm" parameterType="hashmap">
		DELETE 
		FROM t3_tbl_alarm
		WHERE ALARM_NO = #{alarmNo}
	</delete>
	
	<!-- 중고 물품 리스트 -->
	<select id="selectUsedList" parameterType="hashmap" resultType="com.example.anesi.model.Used">
		SELECT *
		FROM t3_tbl_used_purchase
	</select>
	
	<select id="selectStatisticsProduct" parameterType="hashmap" resultType="com.example.anesi.model.Statistics">
		SELECT 
	    total_orders.total_users + total_nonusers.total_nonusers AS total_orders,
	    today_orders.today_users + today_nonusers.today_nonusers AS today_orders,
	    overall_total.total_order_price + overall_nonusers.total_order_price AS overall_total,
	    overall_today.total_order_price + overall_today_nonusers.total_order_price AS overall_today
	    
		FROM
	    (SELECT 
	        COUNT(*) AS total_users 
	    FROM 
	        t3_tbl_user_order) AS total_orders,
	    
	    (SELECT 
	        COUNT(*) AS total_nonusers 
	    FROM 
	        t3_tbl_nonuser_order) AS total_nonusers,
	    
	    (SELECT 
	        COALESCE(SUM(subquery.total_order_price), 0) AS total_order_price
	    FROM 
	        (SELECT 
	            PAYMENT_NO, SUM(ORDER_PRICE) AS total_order_price
	        FROM 
	            t3_tbl_user_order
	        GROUP BY 
	            PAYMENT_NO) AS subquery) AS overall_total,
	    
	    (SELECT 
	        COALESCE(SUM(subquery.total_order_price), 0) AS total_order_price
	    FROM 
	        (SELECT 
	            PAYMENT_NO, SUM(ORDER_PRICE) AS total_order_price
	        FROM 
	            t3_tbl_nonuser_order
	        GROUP BY 
	            PAYMENT_NO) AS subquery) AS overall_nonusers,
	    
	    (SELECT 
	        COUNT(*) AS today_users 
	    FROM 
	        t3_tbl_user_order 
	    WHERE 
	        DATE(NOW()) = DATE(CREATEDATE)) AS today_orders,
	    
	    (SELECT 
	        COUNT(*) AS today_nonusers 
	    FROM 
	        t3_tbl_nonuser_order 
	    WHERE 
	        DATE(NOW()) = DATE(CREATEDATE)) AS today_nonusers,
	    
	    (SELECT 
	        COALESCE(SUM(subquery.total_order_price), 0) AS total_order_price
	    FROM 
	        (SELECT 
	            PAYMENT_NO, SUM(ORDER_PRICE) AS total_order_price
	        FROM 
	            t3_tbl_user_order
	        WHERE 
	            DATE(NOW()) = DATE(CREATEDATE) 
	        GROUP BY 
	            PAYMENT_NO) AS subquery) AS overall_today,
	    
	    (SELECT 
	        COALESCE(SUM(subquery.total_order_price), 0) AS total_order_price
	    FROM 
	        (SELECT 
	            PAYMENT_NO, SUM(ORDER_PRICE) AS total_order_price
	        FROM 
	            t3_tbl_nonuser_order
	        WHERE 
	            DATE(NOW()) = DATE(CREATEDATE) 
	        GROUP BY 
	            PAYMENT_NO) AS subquery) AS overall_today_nonusers;
	</select>
	
	<select id="selectWeeklySales" parameterType="hashmap" resultType="com.example.anesi.model.Statistics">
		SELECT 
	    order_date,
	    SUM(order_count) AS total_order_count,
	    SUM(total_order_amount) AS total_order_amount
	FROM (
	    SELECT 
	        DATE(CREATEDATE) AS order_date,
	        COUNT(*) AS order_count,
	        COALESCE(SUM(ORDER_PRICE), 0) AS total_order_amount
	    FROM 
	        t3_tbl_user_order
	    WHERE 
	        DATE(CREATEDATE) >= DATE_SUB(DATE(NOW()), INTERVAL 7 DAY)
	    GROUP BY 
	        DATE(CREATEDATE)
	    UNION ALL
	    SELECT 
	        DATE(CREATEDATE) AS order_date,
	        COUNT(*) AS order_count,
	        COALESCE(SUM(ORDER_PRICE), 0) AS total_order_amount
	    FROM 
	        t3_tbl_nonuser_order
	    WHERE 
	        DATE(CREATEDATE) >= DATE_SUB(DATE(NOW()), INTERVAL 7 DAY)
	    GROUP BY 
	        DATE(CREATEDATE)
	) AS combined_orders
	GROUP BY 
	    order_date
	ORDER BY 
	    order_date;
	</select>
	
	<!--프로젝트 메인-->
	<!--결제/배송리스트-->
	<select id="mainOrderList" resultType="com.example.anesi.model.UserOrder">
		SELECT delivery_sit_values.DELIVERY_SIT, COALESCE(TOTAL_COUNT, 0) AS TOTAL_COUNT
		FROM (
		    SELECT 1 AS DELIVERY_SIT UNION ALL
		    SELECT 2 AS DELIVERY_SIT UNION ALL
		    SELECT 3 AS DELIVERY_SIT UNION ALL
		    SELECT 4 AS DELIVERY_SIT
		) AS delivery_sit_values
		LEFT JOIN (
		    SELECT DELIVERY_SIT, COUNT(*) AS TOTAL_COUNT
		    FROM (
		        SELECT DELIVERY_SIT FROM t3_tbl_nonuser_order
		        UNION ALL
		        SELECT DELIVERY_SIT FROM t3_tbl_user_order
		    ) AS combined_data
		    GROUP BY DELIVERY_SIT
		) AS counts ON delivery_sit_values.DELIVERY_SIT = counts.DELIVERY_SIT
		ORDER BY delivery_sit_values.DELIVERY_SIT;
	</select>
	<!--중고상품 리스트-->
	<select id="mainUsedList" resultType="com.example.anesi.model.Used">
		SELECT COALESCE(counts.ADMIN_CNT, 0) AS ADMIN_CNT, VALUES1.PURCHASE
		FROM (
		    SELECT 'W' AS PURCHASE UNION ALL
		    SELECT 'Y' AS PURCHASE UNION ALL
		    SELECT 'N' AS PURCHASE
		) AS VALUES1
		LEFT JOIN (
		    SELECT COUNT(*) AS ADMIN_CNT, PURCHASE
		    FROM t3_tbl_used_purchase
		    GROUP BY PURCHASE
		) AS counts ON VALUES1.PURCHASE = counts.PURCHASE
		ORDER BY VALUES1.PURCHASE;
	</select>
	<!--리뷰리스트-->
	<select id="mainReviewList" resultType="com.example.anesi.model.Review">
		SELECT *
		FROM t3_tbl_user_review
	</select>
	<!--상품리스트-->
	<select id="mainProductDel" resultType="com.example.anesi.model.Product">
		SELECT VALUES1.DELETE_YN, COALESCE(counts.DE, 0) AS DE
		FROM(
			SELECT 'N' DELETE_YN UNION ALL
			SELECT 'S' DELETE_YN UNION ALL
			SELECT 'Y' DELETE_YN
		) AS VALUES1
		LEFT JOIN (
				SELECT COUNT(*) AS DE, DELETE_YN
				FROM t3_tbl_product
				GROUP BY DELETE_YN
		
		) AS counts ON counts.DELETE_YN = VALUES1.DELETE_YN
		ORDER BY VALUES1.DELETE_YN
	</select>
	
	<select id="mainProductDis" resultType="com.example.anesi.model.Product">
		SELECT COUNT(*) AS DIS, DISCOUNT_YN 
		FROM t3_tbl_product
		WHERE DISCOUNT_YN='Y'
	</select>
	<!--문의리스트-->
	<select id="mainInquiryCnt" resultType="com.example.anesi.model.Inquiry">
		SELECT COALESCE(COUNT(*), 0) AS INQ_CNT, INQUIRY_CATEGORY
		FROM t3_tbl_user_inquiry
		WHERE REPLY IS NULL
		GROUP BY INQUIRY_CATEGORY
	</select>
	<select id="mainInquiryList" resultType="com.example.anesi.model.Inquiry">
		SELECT CONTENT, CDATETIME, INQUIRY_CATEGORY
		FROM t3_tbl_user_inquiry
	 	WHERE REPLY IS NULL
	 	
	 	<choose>
			<when test="searchOption == 1">
 				  AND INQUIRY_CATEGORY IN ('상품','배송')
			</when>
			<when test="searchOption == 2">
 				  AND INQUIRY_CATEGORY IN ('환불','반품','교환') 
			</when>
			<when test="searchOption == 3">
 				  AND INQUIRY_CATEGORY = '기타' 
			</when>
		</choose>
	 	LIMIT 6
	</select>
</mapper>